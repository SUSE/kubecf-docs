<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KubeCF â€“ Documentation</title>
    <link>https://kubecf.suse.dev/docs/</link>
    <description>Recent content in Documentation on KubeCF</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://kubecf.suse.dev/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Tests</title>
      <link>https://kubecf.suse.dev/docs/reference/tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/reference/tests/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;make cats&lt;/code&gt; target starts a run of the
&lt;a href=&#34;https://github.com/SUSE/cf-acceptance-tests-release&#34; target=&#34;_blank&#34;&gt;Cloud Foundry Acceptance Tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See also the &lt;a href=&#34;https://kubecf.suse.dev/docs/reference/layout/testing/&#34;&gt;entire set of available tests&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;limiting-test-suites&#34;&gt;Limiting test suites&lt;/h2&gt;

&lt;p&gt;To limit the test groups to run, set the BOSH property
&lt;a href=&#34;https://github.com/SUSE/cf-acceptance-tests-release/blob/0.0.1/jobs/acceptance-tests/spec#L47-L54&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;acceptance_tests.include&lt;/code&gt;&lt;/a&gt; as documented.  To do so, adjust the &lt;code&gt;properties&lt;/code&gt;
key in &lt;a href=&#34;https://github.com/cloudfoundry-incubator/kubecf/blob/master/deploy/helm/kubecf/values.yaml&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;values.yaml&lt;/code&gt;&lt;/a&gt; to specify the groups desired.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;properties&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;acceptance-tests&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;acceptance-tests&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;acceptance_tests&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;include&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;+docker,-ssh&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this is an example of how to use the second kind of
customization feature noted in the main
&lt;a href=&#34;https://kubecf.suse.dev/docs/contribution-guidelines/#customization&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Deploy KubeCF on Kind</title>
      <link>https://kubecf.suse.dev/docs/tutorials/deploy-kind/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tutorials/deploy-kind/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;

&lt;p&gt;This guideline will provide a quick way to deploy KubeCF with Kind and should be used only for evaluation purposes.&lt;/p&gt;

&lt;p&gt;Here is a list of all the tools and versions used when creating these instructions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; kind version
kind v0.7.0 go1.13.6 darwin/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; helm version
version.BuildInfo{Version:&amp;quot;v3.1.1&amp;quot;, GitCommit:&amp;quot;afe70585407b420d0097d07b21c47dc511525ac8&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, GoVersion:&amp;quot;go1.13.8&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; docker version
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea
 Built:             Wed Nov 13 07:22:34 2019
 OS/Arch:           darwin/amd64
 Experimental:      false
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; kubectl version
Client Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;17&amp;quot;, GitVersion:&amp;quot;v1.17.3&amp;quot;, GitCommit:&amp;quot;06ad960bfd03b39c8310aaf92d1e7c12ce618213&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2020-02-13T18:08:14Z&amp;quot;, GoVersion:&amp;quot;go1.13.8&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;darwin/amd64&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cf version
cf version 6.46.1+4934877ec.2019-08-23z
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-kind&#34;&gt;Installing Kind&lt;/h2&gt;

&lt;p&gt;To install Kind please follow the official instructions &lt;a href=&#34;https://kind.sigs.k8s.io/docs/user/quick-start/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-a-kind-cluster&#34;&gt;Create a Kind cluster&lt;/h2&gt;

&lt;p&gt;Run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; export KUBECONFIG=kubeconfig-kubecf
&amp;gt; kind create cluster --name kubecf
&amp;gt; kubectl cluster-info --context kind-kubecf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;download-cf-operator-and-kubecf-helm-charts&#34;&gt;Download cf-operator and KubeCF Helm charts&lt;/h2&gt;

&lt;p&gt;Download the latest release bundle (&lt;code&gt;kubecf-bundle-vX.X.X.tgz&lt;/code&gt;) to a local directory and extract it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; curl -s https://api.github.com/repos/cloudfoundry-incubator/kubecf/releases/latest \
   | grep -oP &#39;&amp;quot;browser_download_url&amp;quot;: &amp;quot;\K(.*)kubecf-bundle(.*)(?=&amp;quot;)&#39; \
   | wget -qi -
&amp;gt; tar xf kubecf-bundle-v*.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The archive contains cf-operator and KubeCF Helm charts (&lt;code&gt;cf-operator.tgz&lt;/code&gt; and &lt;code&gt;kubecf_release.tgz&lt;/code&gt; respectively).&lt;/p&gt;

&lt;p&gt;All releases can be found on &lt;a href=&#34;https://github.com/cloudfoundry-incubator/kubecf/releases&#34; target=&#34;_blank&#34;&gt;KubeCF releases&lt;/a&gt; page.&lt;/p&gt;

&lt;h2 id=&#34;installing-cf-operator&#34;&gt;Installing cf-operator&lt;/h2&gt;

&lt;p&gt;Before we can deploy the &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator&#34; target=&#34;_blank&#34;&gt;cf-operator&lt;/a&gt; we need to create the namespace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; kubectl create ns cfo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and after we can install by running the helm command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; helm install cf-operator \
    --namespace cfo \
    --set &amp;quot;global.singleNamespace.name=kubecf&amp;quot; \
    ./cf-operator.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;singleNamespace&lt;/code&gt; property is set to watch the &lt;strong&gt;kubecf&lt;/strong&gt; namespace for changes&lt;/li&gt;
&lt;li&gt;cf-operator version may differ between KubeCF versions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check if the pods are up and running before moving to the next section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; kubectl get pods -n cfo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-kubecf&#34;&gt;Installing KubeCF&lt;/h2&gt;

&lt;p&gt;First let&amp;rsquo;s get Kind node IP address:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node_ip=$(kubectl get node kubecf-control-plane \
  --output jsonpath=&#39;{ .status.addresses[?(@.type == &amp;quot;InternalIP&amp;quot;)].address }&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then set the properties correctly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; _EOF_  &amp;gt; values.yaml
system_domain: ${node_ip}.nip.io
services:
  router:
    externalIPs:
    - ${node_ip}
kube:
  service_cluster_ip_range: 0.0.0.0/0
  pod_cluster_ip_range: 0.0.0.0/0
_EOF_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On this example, we will use Diego instead Eirini but you can easily switch by adding the following
lines into your &lt;strong&gt;values.yaml&lt;/strong&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
features:
  eirini:
    enabled: true
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and, you need to trust the kubernetes root CA on the kind docker container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; docker exec -it &amp;quot;kubecf-control-plane&amp;quot; bash -c &#39;cp /etc/kubernetes/pki/ca.crt /etc/ssl/certs/ &amp;amp;&amp;amp; \
    update-ca-certificates &amp;amp;&amp;amp; \
    (systemctl list-units | grep containerd &amp;gt; /dev/null &amp;amp;&amp;amp; systemctl restart containerd)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;strong&gt;values.yaml&lt;/strong&gt; file should be similiar to the snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;system_domain: 172.17.0.3.nip.io

services:
  router:
    loadBalancerIP:
    - 172.17.0.3

kube:
  service_cluster_ip_range: 0.0.0.0/0
  pod_cluster_ip_range: 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now is time to install KubeCF by running the helm command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; helm install kubecf \
    --namespace kubecf \
    --values values.yaml \
    ./kubecf_release.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the namespace property value is the same as cf-operator &lt;code&gt;singleNamespace&lt;/code&gt; one&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Be aware that it takes a couple of minutes to see the pods showing up on the kubecf namespace and the installation process may take 20-25 minutes depending on your
internet connection speed.&lt;/p&gt;

&lt;p&gt;Run the following command to watch the pods progress:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; watch kubectl get pods -n kubecf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After all the pods are running you can check by running the &lt;em&gt;cf&lt;/em&gt; cli command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cf api --skip-ssl-validation api.172.17.0.3.nip.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;get the admin password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; admin_pass=$(kubectl get secret --namespace kubecf \
                                  var-cf-admin-password \
                                  -o jsonpath=&#39;{.data.password}&#39; | base64 --decode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and login with: &lt;code&gt;cf auth admin &amp;quot;${admin_pass}&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next&lt;/h2&gt;

&lt;p&gt;After the deployment finishes with success it&amp;rsquo;s time to give it a try by pushing an app using the cf-push cli command.&lt;/p&gt;

&lt;h2 id=&#34;cleaning-up&#34;&gt;Cleaning up&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; kind delete cluster --name kubecf
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Eirini Persistence broker</title>
      <link>https://kubecf.suse.dev/docs/tutorials/eirini_persi/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tutorials/eirini_persi/</guid>
      <description>
        
        
        

&lt;p&gt;KubeCF allows to leverage the Kubernetes Cluster available &lt;code&gt;StorageClass&lt;/code&gt;. When Eirini is being enabled, two additional components are deployed, the &lt;code&gt;eirini-persi-extension&lt;/code&gt; and &lt;code&gt;eirini-persi-broker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The broker must be configured in order to use the storageclass to provide support for persistence data for applications pushed to CloudFoundry with Eirini.&lt;/p&gt;

&lt;p&gt;You can set up default plans that are applied to the broker during deployment.&lt;/p&gt;

&lt;p&gt;To configure the broker, in the KubeCF values add and adjust as needed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;eirinix&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;persi-broker&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;service-plans&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;id&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;default&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;description&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Existing default storage class&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;kube_storage_class&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Storageclass used for provisioning&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;free&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;default_size&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1Gi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Default size of generated PVC&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;default_access_mode&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ReadWriteOnly&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Here you can tweak the default access mode for new PVCs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;setup-eirini-persi-broker-with-kubecf&#34;&gt;Setup eirini-persi-broker with KubeCF&lt;/h2&gt;

&lt;p&gt;In this section we will see how to setup the eirini-persi-broker on a KubeCF deployment.&lt;/p&gt;

&lt;h3 id=&#34;get-the-broker-password&#34;&gt;Get the broker password&lt;/h3&gt;

&lt;p&gt;After deploying KubeCF the broker password should be automatically generated (the example assumes you have deployed KubeCF in the &lt;code&gt;kubecf&lt;/code&gt; namespace):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; BROKER_PASS=$(kubectl get secrets -n kubecf -o json persi-broker-auth-password | jq -r &#39;.data.&amp;quot;password&amp;quot;&#39; | base64 -d)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-service-broker&#34;&gt;Create the service broker&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;cf-cli&lt;/code&gt; (you must be logged in) let&amp;rsquo;s add the broker to our cf instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf create-service-broker eirini-persi admin $BROKER_PASS http://eirini-persi-broker:8999
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enable-the-service-for-the-space&#34;&gt;Enable the service for the space&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s enable the service (here, doing it globally):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf enable-service-access eirini-persi


Enabling access to all plans of service eirini-persi for all orgs as admin...
OK

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check everything is ok:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; cf service-brokers

Getting service brokers as admin...

name                  url
eirini-persi          http://eirini-persi-broker:8999&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If eirini-persi is showed among the list of the available brokers, it means that it is configured and plans supplied during deployment are available to be consumed.&lt;/p&gt;

&lt;p&gt;Now the broker should be available in the marketplace, list all the broker services:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf marketplace
Getting services from marketplace in org system / space tmp as admin...
OK

service        plans     description
eirini-persi   default   Eirini persistence broker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the plans available from the broker (output might differ):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf marketplace -s eirini-persi
Getting service plan information for service eirini-persi as admin...
OK

service plan   description                 free or paid
default        Eirini persistence broker   free
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-the-eirini-persi-broker&#34;&gt;Using the Eirini-persi broker&lt;/h2&gt;

&lt;p&gt;To verify that everything works correctly it is possible to check after creating a service that the persistent volume claims are present in the Kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&#34;create-a-service&#34;&gt;Create a service&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;eirini-persi-broker&lt;/code&gt; will create PVCs associated to the services that are created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf create-service eirini-persi default eirini-persi-1
Creating service instance eirini-persi-1 in org system / space tmp as admin...
OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this way, we can associate the service to an app, which will actually link and attach a PVC to it.&lt;/p&gt;

&lt;p&gt;List all the &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; and verify that a new one was created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; kubectl get pvc -n eirini
NAME                                   STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
f9d4b977-0b9e-4fcb-a92e-652bc77dd7e7   Bound    pvc-9960cc11-7895-11e9-afac-024267c84a6b   1Gi        RWO            persistent     6s

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a service with a custom capacity, you can define the quota when creating the service.&lt;/p&gt;

&lt;p&gt;E.g. create a service providing a volume with 20M of quota:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf create-service eirini-persi default eirini-persi-1-20M-quota -c &#39;{&amp;quot;size&amp;quot;: &amp;quot;20M&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E.g. To create a PVC which has a different access mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf create-service eirini-persi default eirini-persi-1-rwm -c &#39;{&amp;quot;access_mode&amp;quot;: &amp;quot;ReadWriteMany&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bind-volumes-to-a-cloud-foundry-application&#34;&gt;Bind volumes to a Cloud Foundry application&lt;/h3&gt;

&lt;p&gt;List the available services:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf services
Getting services in org system / space tmp as admin...

name                          service        plan      bound apps    last operation
eirini-persi-1                eirini-persi   default   dizzylizard   create succeeded
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s associate the service to an application (in this case &lt;code&gt;dizzylizard&lt;/code&gt;) using &lt;code&gt;eirini-persi-1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf bind-service dizzylizard eirini-persi-1

Binding service eirini-persi-1 to app dizzylizard in org system / space tmp as admin...
OK

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restage our app so our change takes effect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; cf restage dizzylizard

Restaging app dizzylizard in org system / space tmp as admin...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;access-the-volume&#34;&gt;Access the Volume&lt;/h3&gt;

&lt;p&gt;Once the service is associated, the application can access to the data of the volume mount by reading the mounted path inside the &lt;code&gt;VCAP_SERVICES&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;An example of &lt;code&gt;VCAP_SERVICES&lt;/code&gt; generated by &lt;code&gt;eirini-persi-broker&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;eirini-persi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;	  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;credentials&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;volume_id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;the-volume-id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;eirini-persi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;my-instance&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;plan&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hostpath&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
			&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;erini&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;storage&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;volume_mounts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
		  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;container_dir&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/var/vcap/data/de847d34-bdcc-4c5d-92b1-cf2158a15b47&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;device_type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;rw&amp;#34;&lt;/span&gt;
		  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
	  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can refer to the &lt;a href=&#34;https://docs.cloudfoundry.org/devguide/services/using-vol-services.html&#34; target=&#34;_blank&#34;&gt;Cloud Foundry documentation regarding of how to access to the Volume Service&lt;/a&gt;, with the difference that the eirini broker will create services with the id &lt;code&gt;eirini-persi&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;see-also&#34;&gt;See also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SUSE/scf/wiki/Persistence-with-Eirini-in-SCF&#34; target=&#34;_blank&#34;&gt;https://github.com/SUSE/scf/wiki/Persistence-with-Eirini-in-SCF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Deploy Stratos next to KubeCF</title>
      <link>https://kubecf.suse.dev/docs/tutorials/deploy-stratos/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tutorials/deploy-stratos/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;required-details&#34;&gt;Required details&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;External Kubernetes IP&lt;/li&gt;
&lt;li&gt;UAA endpoint url&lt;/li&gt;
&lt;li&gt;CF admin username and password&lt;/li&gt;
&lt;li&gt;CF API url&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;prepare-stratos-setup-config&#34;&gt;Prepare Stratos setup config&lt;/h3&gt;

&lt;p&gt;Replace &lt;code&gt;&amp;lt;EXTERNAL_IP&amp;gt;&lt;/code&gt; by the external ip[s] of your cluster,  adapt the port if required and store everything in a file, for example &lt;code&gt;stratos.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;console&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;service&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;externalIPs&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;EXTERNAL_IP&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;servicePort&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8443&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;deploy-stratos&#34;&gt;Deploy Stratos&lt;/h3&gt;

&lt;p&gt;Add the SUSE Kubernetes charts repo and deploy Stratos. Instead of the SUSE repo the Stratos chart can also be referenced from &lt;a href=&#34;https://github.com/cloudfoundry/stratos/releases&#34; target=&#34;_blank&#34;&gt;https://github.com/cloudfoundry/stratos/releases&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm repo add suse https://kubernetes-charts.suse.com/
helm install --namespace stratos --name stratos --values ./stratos.yml suse/console&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;initial-setup-of-stratos&#34;&gt;Initial setup of Stratos&lt;/h2&gt;

&lt;p&gt;As soon as Stratos is deployed connect to https://&lt;EXTERNAL_IP&gt;:&lt;SERIVCE_PORT&gt; and follow the steps.&lt;/p&gt;

&lt;p&gt;Provide your UAA Endpoint url, for example: &lt;a href=&#34;https://uaa&#34; target=&#34;_blank&#34;&gt;https://uaa&lt;/a&gt;.&lt;YOUR_CF_DOMAIN&gt; (Make sure that there is no leading Slash at the end, otherwise UAA will ignore the authentication request.)&lt;/p&gt;

&lt;p&gt;The client id is &lt;code&gt;cf&lt;/code&gt; and the client secret stays empty.&lt;/p&gt;

&lt;p&gt;The admin username is &lt;code&gt;admin&lt;/code&gt; and password is the Cloudfoundry admin password. If you do not know the admin password yet, because for example it was autogenerated during the initial deployment of kubecf, it can be extracted with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get secrets -n kubecf kubecf.var-cf-admin-password -o json &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; jq -r .data.password &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; base64 -d&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step defines which uaa group specifies Stratos admins and does not need to be changed.&lt;/p&gt;

&lt;p&gt;After the initial setup Cloudfoundry can be added with the api endpoint url and the same cloudfoundry admin credentials.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Bosh releases integration</title>
      <link>https://kubecf.suse.dev/docs/tutorials/bosh-integration/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tutorials/bosh-integration/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#preparing-the-release-image&#34;&gt;Preparing the Release Image&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#building-a-docker-image-with-fissile&#34;&gt;Building a Docker Image with Fissile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uploading-the-image&#34;&gt;Uploading The Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modify-kubecf-to-use-the-new-image&#34;&gt;Modify Kubecf to Use the New Image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#integrating-the-release-in-kubecf&#34;&gt;Integrating the Release in Kubecf&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#bpm&#34;&gt;BPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#operation-files&#34;&gt;Operation Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#testing-with-kubecf&#34;&gt;Testing With Kubecf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preparing-the-release-image&#34;&gt;Preparing the Release Image&lt;/h2&gt;

&lt;p&gt;BOSH release authors who want to test their development code with the
Quarks operator need to build a Docker image from their release.
This can be done with &lt;code&gt;fissile&lt;/code&gt;.  Afterwards, upload the image to a
cluster for testing it, e.g. with Kubecf.&lt;/p&gt;

&lt;h3 id=&#34;building-a-docker-image-with-fissile&#34;&gt;Building a Docker Image with Fissile&lt;/h3&gt;

&lt;p&gt;Build the BOSH release first and convert it with &lt;a href=&#34;https://github.com/cloudfoundry-incubator/fissile&#34; target=&#34;_blank&#34;&gt;fissile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To generate a docker image from the BOSH release, you should use the
following subcommand:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fissile build release-image&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information on how to use the command, please refer to the
related &lt;a href=&#34;https://github.com/cloudfoundry-incubator/fissile/blob/develop/docs/build-docker-imgs.md&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;. For a real example, see &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator-ci/blob/e83e46548787ee740ea1918182604faaa5cddf8f/pipelines/release-images/tasks/build.sh#L34&#34; target=&#34;_blank&#34;&gt;build.sh&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;uploading-the-image&#34;&gt;Uploading The Image&lt;/h3&gt;

&lt;p&gt;Depending on your cluster, you will need a way to get the locally
built image into the Kubernetes registry.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;minikube&lt;/strong&gt; you can build directly on minikube&amp;rsquo;s Docker. Switch
to that docker daemon by running &lt;code&gt;eval $(minikube docker-env)&lt;/code&gt;, before
you build the image with &lt;code&gt;fissile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;kind&lt;/strong&gt;, you need to use &lt;code&gt;kind load docker-image&lt;/code&gt; after building
the image, to make it available, i.e.:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kind load docker-image docker.io/org/nats:0.1-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;modify-kubecf-to-use-the-new-image&#34;&gt;Modify Kubecf to Use the New Image&lt;/h3&gt;

&lt;p&gt;Add an operations file to Kubernetes with the new image location. The
example below uses NATS as the example for a BOSH release.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;kubectl&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;apply&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;-f&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;&amp;lt;EOF&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;---&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;apiVersion&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;kind&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;ConfigMap&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats-dev&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;data&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;ops&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;type&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;replace&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;path&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/releases/name=nats&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;value&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;url&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;docker.io/org/nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.1&lt;/span&gt;-dev&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;sha1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;~&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;EOF&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, when running &lt;code&gt;helm install kubecf&lt;/code&gt;, refer to that image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm install ... --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;operations.custom={nats-dev}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also unpack the helm release and modify it directly.
There is no need to zip the release again, as &lt;code&gt;helm install kubecf/&lt;/code&gt; is
able to install the unpacked release.&lt;/p&gt;

&lt;p&gt;Note further that the above is an example of how to use the first kind
of customization feature noted in the main &lt;a href=&#34;Contribute.md#customization&#34; target=&#34;_blank&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;integrating-the-release-in-kubecf&#34;&gt;Integrating the Release in Kubecf&lt;/h2&gt;

&lt;p&gt;With Quarks and Kubecf, BOSH releases can largely be used just the
same as with a BOSH director. There are a few things Quarks offers,
however, to make the adaptation to the Kubernetes environment easier.&lt;/p&gt;

&lt;h3 id=&#34;bpm&#34;&gt;BPM&lt;/h3&gt;

&lt;p&gt;BPM configurations for jobs are parsed from a rendered &lt;code&gt;bpm.yml&lt;/code&gt;, as
usual. But if need be, it is also possible to override the BPM
configuration in the deployment manifest in the &lt;code&gt;quarks&lt;/code&gt; field. See
&lt;a href=&#34;https://bosh.io/docs/bpm/config/&#34; target=&#34;_blank&#34;&gt;the bpm documentation&lt;/a&gt; for details on how to configure BPM.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;instance_groups&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;instances&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;jobs&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;properties&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;quarks&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;bpm&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;processes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;limits&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;open_files&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;executable&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/var/vcap/packages/gnatsd/bin/gnatsd&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;args&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;-c&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/var/vcap/jobs/nats/config/nats.conf&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: The next section on &lt;a href=&#34;#operation-files&#34;&gt;ops files&lt;/a&gt; explains how
this can be applied without the need to modify the original deployment
manifest using ops files.&lt;/p&gt;

&lt;h3 id=&#34;operation-files&#34;&gt;Operation Files&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://bosh.io/docs/cli-ops-files/&#34; target=&#34;_blank&#34;&gt;ops files&lt;/a&gt; can be used to modify arbitrary parts of the deployment
manifest before it is applied. To do so, create a file in the
directory &lt;code&gt;deploy/helm/scf/assets/operations/instance_groups&lt;/code&gt; and it
will be automagically applied during installation, courtesy of the
bazel machinery.&lt;/p&gt;

&lt;p&gt;The ops file for the example above could look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;type&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;replace&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;path&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/instance_groups/name=nats/jobs/name=nats/properties/quarks&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;?&lt;/span&gt;/bpm/processes&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;value&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;limits&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;open_files&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;executable&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/var/vcap/packages/gnatsd/bin/gnatsd&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;args&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;-c&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/var/vcap/jobs/nats/config/nats.conf&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;testing-with-kubecf&#34;&gt;Testing With Kubecf&lt;/h2&gt;

&lt;p&gt;After upload and integration, it is possible to build and deploy Kubecf
according to any of the recipes listed by the main
&lt;a href=&#34;Contribute.md#deployment&#34; target=&#34;_blank&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Deploy KubeCF in Minikube</title>
      <link>https://kubecf.suse.dev/docs/tutorials/deploy-minikube/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tutorials/deploy-minikube/</guid>
      <description>
        
        
        

&lt;p&gt;The intended audience of this document are developers wishing to
contribute to the Kubecf project.&lt;/p&gt;

&lt;p&gt;Here we explain how to deploy Kubecf locally using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minikube to manage a local Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;A cf-operator pinned with Bazel.&lt;/li&gt;
&lt;li&gt;Kubecf built and deployed from the sources in the current checkout.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;minikube&#34;&gt;Minikube&lt;/h2&gt;

&lt;p&gt;Minikube is one of several projects enabling the deployment,
management and tear-down of a local Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;The Kubecf Bazel workspace contains targets to deploy and/or tear-down
a Minikube-based cluster. Using these has the advantage of using a
specific version of Minikube. On the other side, the reduced
variability of the development environment is a disadvantage as well,
possibly allowing portability issues to slide through.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bazel run //dev/minikube:start&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tear-down&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bazel run //dev/minikube:delete&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;attention-dangers&#34;&gt;Attention, Dangers&lt;/h3&gt;

&lt;p&gt;Minikube edits the Kubernetes configuration file referenced by the
environment variable &lt;code&gt;KUBECONFIG&lt;/code&gt;, or &lt;code&gt;~/.kube/config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To preserve the original configuration either make a backup of the
relevant file, or change &lt;code&gt;KUBECONFIG&lt;/code&gt; to a different path specific to
the intended deployment.&lt;/p&gt;

&lt;h3 id=&#34;advanced-configuration&#34;&gt;Advanced configuration&lt;/h3&gt;

&lt;p&gt;The local &lt;a href=&#34;../kube/minikube.md&#34;&gt;Minikube Documentation&lt;/a&gt; explains the
various environment variables which can be used to configure the
resources used by the cluster (CPUs, memory, disk size, etc.) in
detail.&lt;/p&gt;

&lt;h2 id=&#34;cf-operator&#34;&gt;cf-operator&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator&#34; target=&#34;_blank&#34;&gt;cf-operator&lt;/a&gt; is the underlying generic tool to deploy a (modified)
BOSH deployment like Kubecf for use.&lt;/p&gt;

&lt;p&gt;It has to be installed in the same kube cluster Kubecf will be deployed to.&lt;/p&gt;

&lt;h3 id=&#34;deployment-and-tear-down&#34;&gt;Deployment and Tear-down&lt;/h3&gt;

&lt;p&gt;The Kubecf Bazel workspace contains targets to deploy and/or tear-down
cf-operator:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bazel run //dev/cf_operator:apply&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tear-down&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bazel run //dev/cf_operator:delete&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;kubecf&#34;&gt;Kubecf&lt;/h2&gt;

&lt;p&gt;With all the prequisites handled by the preceding sections it is now
possible to build and deploy kubecf itself.&lt;/p&gt;

&lt;h3 id=&#34;system-domain&#34;&gt;System domain&lt;/h3&gt;

&lt;p&gt;The main configuration to set for kubecf is its system domain.
For the Minikube foundation we have to specify it as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;system_domain: &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;minikube ip&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;.xip.io&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  &amp;gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;bazel info workspace&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/dev/kubecf/system_domain_values.yaml&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;deployment-and-tear-down-1&#34;&gt;Deployment and Tear-down&lt;/h3&gt;

&lt;p&gt;The Kubecf Bazel workspace contains targets to deploy and/or tear-down
kubecf from the sources:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bazel run //dev/kubecf:apply&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tear-down&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bazel run //dev/kubecf:delete&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In this default deployment kubecf is launched without Ingress, and
uses the Diego scheduler.&lt;/p&gt;

&lt;h3 id=&#34;access&#34;&gt;Access&lt;/h3&gt;

&lt;p&gt;Accessing the cluster from outside of the minikube VM requires
&lt;a href=&#34;#ingress&#34;&gt;ingress&lt;/a&gt; to be set up correctly.&lt;/p&gt;

&lt;p&gt;To access the cluster after the cf-operator has completed the
deployment and all pods are active invoke:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cf api --skip-ssl-validation &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://api.&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;minikube ip&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;.xip.io&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Copy the admin cluster password.&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;acp&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get secret &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;        --namespace kubecf kubecf.var-cf-admin-password &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;        -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{.data.password}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; base64 --decode&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Use the password from the previous step when requested.&lt;/span&gt;
cf auth admin &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;acp&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;advanced-topics&#34;&gt;Advanced Topics&lt;/h3&gt;

&lt;h4 id=&#34;diego-vs-eirini&#34;&gt;Diego vs Eirini&lt;/h4&gt;

&lt;p&gt;Diego is the standard scheduler used by kubecf to deploy CF
applications. Eirini is an alternative to Diego that follows a more
Kubernetes native approach, deploying the CF apps directly to a
Kubernetes namespace.&lt;/p&gt;

&lt;p&gt;To activate this alternative, add a file matching the pattern
&lt;code&gt;*values.yaml&lt;/code&gt; to the directory &lt;strong&gt;dev/kubecf&lt;/strong&gt; and containing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;features&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;eirini&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;enabled&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;before deploying kubecf.&lt;/p&gt;

&lt;h4 id=&#34;ingress&#34;&gt;Ingress&lt;/h4&gt;

&lt;p&gt;By default, the cluster is exposed through its Kubernetes services.&lt;/p&gt;

&lt;p&gt;To use the NGINX ingress instead, it is necessary to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install and configure the NGINX Ingress Controller.&lt;/li&gt;
&lt;li&gt;Configure Kubecf to use the ingress controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This has to happen before deploying kubecf.&lt;/p&gt;

&lt;h5 id=&#34;installation-of-the-nginx-ingress-controller&#34;&gt;Installation of the NGINX Ingress Controller&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm install stable/nginx-ingress &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --name ingress &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --namespace ingress &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tcp.2222=kubecf/kubecf-scheduler:2222&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tcp.&amp;lt;services.tcp-router.port_range.start&amp;gt;=kubecf/kubecf-tcp-router:&amp;lt;services.tcp-router.port_range.start&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  ...
  --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tcp.&amp;lt;services.tcp-router.port_range.end&amp;gt;=kubecf/kubecf-tcp-router:&amp;lt;services.tcp-router.port_range.end&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;controller.service.externalIPs={&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;minikube ip&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;tcp.&amp;lt;port&amp;gt;&lt;/code&gt; option uses the NGINX TCP pass-through.&lt;/p&gt;

&lt;p&gt;In the case of the &lt;code&gt;tcp-router&lt;/code&gt; ports, one &lt;code&gt;--set&lt;/code&gt; for each port is required, starting with
&lt;code&gt;services.tcp-router.port_range.start&lt;/code&gt; and ending with &lt;code&gt;services.tcp-router.port_range.end&lt;/code&gt;. Those
values are defined on the &lt;code&gt;values.yaml&lt;/code&gt; file with default values.&lt;/p&gt;

&lt;p&gt;The last flag in the command above assigns the external IP of the
cluster to the Ingress Controller service.&lt;/p&gt;

&lt;h5 id=&#34;configure-kubecf&#34;&gt;Configure kubecf&lt;/h5&gt;

&lt;p&gt;Place a file matching the pattern &lt;code&gt;*values.yaml&lt;/code&gt; into the directory
&lt;strong&gt;dev/kubecf&lt;/strong&gt; and containing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;features&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;ingress&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;enabled&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Cloud Foundry Operator</title>
      <link>https://kubecf.suse.dev/docs/concepts/operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/concepts/operator/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;The CF-Operator is a Cloud Foundry Incubating Project.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/&#34; target=&#34;_blank&#34;&gt;cf-operator&lt;/a&gt; enables the deployment of BOSH Releases, especially Cloud Foundry, to Kubernetes.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s implemented as a k8s operator, an active controller component which acts upon custom k8s resources.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/#installing&#34; target=&#34;_blank&#34;&gt;Installation notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Incubation Proposal: &lt;a href=&#34;https://docs.google.com/document/d/1_IvFf-cCR4_Hxg-L7Z_R51EKhZfBqlprrs5NgC2iO2w/edit#heading=h.lybtsdyh8res&#34; target=&#34;_blank&#34;&gt;Containerizing Cloud Foundry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Slack: #quarks-dev on &lt;a href=&#34;https://slack.cloudfoundry.org/&#34; target=&#34;_blank&#34;&gt;https://slack.cloudfoundry.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Backlog: &lt;a href=&#34;https://www.pivotaltracker.com/n/projects/2192232&#34; target=&#34;_blank&#34;&gt;Pivotal Tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker: &lt;a href=&#34;https://hub.docker.com/r/cfcontainerization/cf-operator/tags&#34; target=&#34;_blank&#34;&gt;https://hub.docker.com/r/cfcontainerization/cf-operator/tags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Project Quarks</title>
      <link>https://kubecf.suse.dev/docs/concepts/quarks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/concepts/quarks/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.cloudfoundry.org/project-quarks/&#34; target=&#34;_blank&#34;&gt;Project Quarks&lt;/a&gt; is an incubating effort within the Cloud Foundry Foundation that packages Cloud Foundry Application Runtime as containers instead of virtual machines, enabling easy deployment to Kubernetes.&lt;/p&gt;

&lt;p&gt;The resulting containerized CFAR provides an identical developer experience to that of BOSH-managed Cloud Foundry installations, requires less infrastructure capacity and delivers an operational experience that is familiar to Kubernetes operators.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Run smoke tests</title>
      <link>https://kubecf.suse.dev/docs/tutorials/run-smoke-tests/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tutorials/run-smoke-tests/</guid>
      <description>
        
        
        

&lt;p&gt;Once you have deployed KubeCF, you might want to validate it by running Cloud
Foundry&amp;rsquo;s smoke tests.
For that purpose, KubeCF&amp;rsquo;s helm chart ships the Cloud Foundry smoke tests,
packaged inside of a deployment&amp;rsquo;s instance group.&lt;/p&gt;

&lt;h2 id=&#34;triggering-the-smoke-tests&#34;&gt;Triggering the smoke tests&lt;/h2&gt;

&lt;p&gt;The smoke tests are run by a CF-Operator qjob (a wrapper on Kube jobs). That job
is defined to not trigger automatically by default. To start it, patch the job
with trigger strategy &amp;ldquo;now&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get qjob --namespace scf --output name 2&amp;gt; /dev/null | grep smoke-tests
quarksjob.quarks.cloudfoundry.org/smoke-tests

$ kubectl patch quarksjob.quarks.cloudfoundry.org/smoke-tests \
         --namespace kubecf --type merge --patch \
         &#39;{ &amp;quot;spec&amp;quot;: { &amp;quot;trigger&amp;quot;: { &amp;quot;strategy&amp;quot;: &amp;quot;now&amp;quot; } } }&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will start the job, which creates a &lt;code&gt;smoke-tests-&amp;lt;id&amp;gt;&lt;/code&gt; pod. Inside that
pod, there&amp;rsquo;s a container called &lt;code&gt;smoke-tests-smoke-tests&lt;/code&gt; with the test run.&lt;/p&gt;

&lt;p&gt;You can, as usual, see the resulting logs from the smoke-tests pod with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl logs -f smoke-tests-614496c133797980-bm2g4 --namespace scf \
          --container smoke-tests-smoke-tests
Running smoke tests...
Running binaries smoke/isolation_segments/isolation_segments.test
smoke/logging/logging.test
smoke/runtime/runtime.test
[1592406628] CF-Isolation-Segment-Smoke-Tests - 4 specs - 7 nodes SSSS SUCCESS! 13.717155722s
[1592406628] CF-Logging-Smoke-Tests - 2 specs - 7 nodes Sâ€¢ SUCCESS! 36.291956367s
[1592406628] CF-Runtime-Smoke-Tests - 2 specs - 7 nodes Sâ€¢ SUCCESS! 30.456607562s

Ginkgo ran 3 suites in 1m21.517660359s
Test Suite Passed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The pod will exit with a return code of &lt;code&gt;0&lt;/code&gt; if successful, and other if not.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Upgrading KubeCF deployments</title>
      <link>https://kubecf.suse.dev/docs/tasks/upgrade/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tasks/upgrade/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;upgrading-from-a-previous-deployment&#34;&gt;Upgrading from a previous deployment&lt;/h2&gt;

&lt;p&gt;Upgrading is roughly the same as doing an &lt;a href=&#34;https://kubecf.suse.dev/docs/getting-started/kubernetes-deploy/&#34;&gt;initial deployment&lt;/a&gt;; however, please
use &lt;code&gt;helm upgrade&lt;/code&gt; intead of &lt;code&gt;helm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are providing a configuration file that was originally from a previous
deployment, please take care to review the configuration to ensure you are not
maintaining default values from a previous version unintentionally.  Where
possible, not specifying configuration that maintains the default values will
prevent accidentally changing them if the defaults have changed in the new
version.&lt;/p&gt;

&lt;h2 id=&#34;upgrading-from-scf&#34;&gt;Upgrading from SCF&lt;/h2&gt;

&lt;p&gt;Please refer to the &lt;a href=&#34;https://documentation.suse.com/suse-cap/2.0/html/cap-guides/cha-cap-upgrade.html&#34; target=&#34;_blank&#34;&gt;SUSE documentation&lt;/a&gt;.  Exporting data from the SCF
insallation and importing into KubeCF is required.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Deploy KubeCF</title>
      <link>https://kubecf.suse.dev/docs/tasks/deploy/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tasks/deploy/</guid>
      <description>
        
        
        

&lt;h3 id=&#34;deploying-on-rhel-centos-7-based-kubernetes&#34;&gt;Deploying on RHEL / CentOS 7 -based Kubernetes&lt;/h3&gt;

&lt;p&gt;If you are deploying with diego (that is, Eirini is not enabled) on top of a
RHEL / CentOS 7 based cluster, please make sure that the
&lt;code&gt;user.max_user_namespaces&lt;/code&gt; &lt;code&gt;sysctl&lt;/code&gt; is set to a large number.  Do this on any
worker node that may host any &lt;code&gt;diego-cell&lt;/code&gt; workloads:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo sh -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;sysctl -w user.max_user_namespaces=15076 | tee -a /etc/sysctl.conf&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not necessary on RHEL / CentOS 8 based systems.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Secret rotation KubeCF</title>
      <link>https://kubecf.suse.dev/docs/tasks/secrets/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tasks/secrets/</guid>
      <description>
        
        
        

&lt;p&gt;&lt;strong&gt;Rotating secrets&lt;/strong&gt; is in general the process of updating one or more
secrets to new values and restarting all affected pods so that they
will use these new values.&lt;/p&gt;

&lt;p&gt;Most of the process is automatic. How to trigger it is explained
in the following document.&lt;/p&gt;

&lt;p&gt;Beyond this, the keys used to encrypt the Cloud Controller Database
(CCDB) can also be rotated, however, they do not exist as general
secrets of the KubeCF deployment. This means that the general process
explained above &lt;strong&gt;does not apply&lt;/strong&gt; to them.&lt;/p&gt;

&lt;p&gt;The audience of this document are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developers working on KubeCF.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operators deploying KubeCF.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;One of the features KubeCF (or rather the cf-operator it sits on top
of) provides is the ability to declare secrets (passwords and
certificates) and have the system automatically generate something
suitably random for such on deployment, and distribute the results to
the pods using them.&lt;/p&gt;

&lt;p&gt;This removes the burden from human operators to come up with lots of
such just to have all the internal components of KubeCF properly wired
up for secure communication.&lt;/p&gt;

&lt;p&gt;However, even with this, operators may wish to change such secrets
from time to time, or on a schedule. In other words, re-randomize the
board, and limit the lifetime of any particular secret.&lt;/p&gt;

&lt;p&gt;As a note on terminology, this kind of change is called
&lt;strong&gt;rotating a secret&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This document describes how this can be done, in the context of KubeCF.&lt;/p&gt;

&lt;h3 id=&#34;finding-secrets&#34;&gt;Finding secrets&lt;/h3&gt;

&lt;p&gt;Retrieve the list of all secrets maintained by a KubeCF deployment via&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get quarkssecret --namespace kubecf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see the information about a specific secret, for example the NATS password, use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get quarkssecret --namespace kubecf kubecf.var-nats-password --output yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that each quarkssecret has a corresponding regulare k8s secret it
controls.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get secret --namespace kubecf
kubectl get secret --namespace kubecf kubecf.var-nats-password --output yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;requesting-a-rotation-for-a-specific-secret&#34;&gt;Requesting a rotation for a specific secret&lt;/h3&gt;

&lt;p&gt;We keep using &lt;code&gt;kubecf.var-nats-password&lt;/code&gt; as our example secret.&lt;/p&gt;

&lt;p&gt;To rotate this secret:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a YAML file for a ConfigMap of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ---
 apiVersion: v1
 kind: ConfigMap
 metadata:
   name: rotate-kubecf.var-nats-password
   labels:
     quarks.cloudfoundry.org/secret-rotation: &amp;quot;true&amp;quot;
 data:
   secrets: &#39;[&amp;quot;kubecf.var-nats-password&amp;quot;]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, while the name of this ConfigMap can be technically
 anything (allowed by k8s syntax) we recommend using a name
 derived from the name of the secret itself, to make the
 connection clear.&lt;/p&gt;

&lt;p&gt;Note further that while this example rotates only a single
 secret, the &lt;code&gt;data.secrets&lt;/code&gt; key accepts an array of secret names,
 allowing the simultaneous rotation of many secrets together.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apply this ConfigMap using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; kubectl apply --namespace kubecf -f /path/to/your/yaml/file
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The cf-operator will process this ConfigMap due the label&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; quarks.cloudfoundry.org/secret-rotation: &amp;quot;true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and knows that it has to invoke a rotation of the referenced
 secrets.&lt;/p&gt;

&lt;p&gt;The actions of the cf-operator can be followed in its log.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After the cf-operator has done the rotation, i.e. has not only
changed the secrets, but also restarted all affected pods (the
users of the rotated secrets), delete the trigger config map
again:&lt;/p&gt;

&lt;p&gt;kubectl delete &amp;ndash;namespace kubecf -f /path/to/your/yaml/file&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;rotating-the-ccdb-encryption-keys&#34;&gt;Rotating the CCDB encryption keys&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - Always backup the database before rotating the encryption key.&lt;/p&gt;

&lt;p&gt;The key used to encrypt the database is generated the first time kubecf is deployed.
It is based on the Helm values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ccdb&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;encryption&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;rotation&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;key_labels&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;encryption_key_0&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;current_key_label&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;encryption_key_0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each label under &lt;code&gt;key_labels&lt;/code&gt;, kubecf will generate an encryption key.
The &lt;code&gt;current_key_label&lt;/code&gt; indicates which key is currently being used.&lt;/p&gt;

&lt;p&gt;In order to rotate the CCDB encryption key, add a new label to &lt;code&gt;key_labels&lt;/code&gt; (keeping the old
labels), and mark the &lt;code&gt;current_key_label&lt;/code&gt; with the newly added label. Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ccdb&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;encryption&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;rotation&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;key_labels&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;encryption_key_0&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;encryption_key_1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;current_key_label&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;encryption_key_1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - key labels should be less than 240 characters long.&lt;/p&gt;

&lt;p&gt;Then, update the kubecf Helm installation. After Helm finishes its updates, trigger the
&lt;code&gt;rotate-cc-database-key&lt;/code&gt; errand:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - the following command assumes the Helm installation is named &lt;code&gt;kubecf&lt;/code&gt; and it was
installed to the &lt;code&gt;kubecf&lt;/code&gt; namespace. These values may be different depending on how kubecf was
installed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl patch qjob kubecf-rotate-cc-database-key &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --namespace kubecf &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --type merge &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --patch &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;trigger&amp;#34;:{&amp;#34;strategy&amp;#34;:&amp;#34;now&amp;#34;}}}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Test BOSH releases</title>
      <link>https://kubecf.suse.dev/docs/tasks/bosh/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/tasks/bosh/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Deployment Walkthrough</title>
      <link>https://kubecf.suse.dev/docs/deployment/kubernetes-deploy/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/deployment/kubernetes-deploy/</guid>
      <description>
        
        
        

&lt;p&gt;The intended audience of this document are developers wishing to
contribute to the Kubecf project.&lt;/p&gt;

&lt;p&gt;Here we explain how to deploy Kubecf using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A generic kubernetes cluster.&lt;/li&gt;
&lt;li&gt;A released cf-operator helm chart.&lt;/li&gt;
&lt;li&gt;A released kubecf helm chart.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;In contrast to other recipes, we are not set on using a local
cluster. Any Kubernetes cluster will do, assuming that the following
requirements are met:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Presence of a default storage class (provisioner).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For use with a diego-based kubecf (default), a node OS with XFS
support.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For GKE, using the option &lt;code&gt;--image-type UBUNTU&lt;/code&gt; with the
&lt;code&gt;gcloud beta container&lt;/code&gt; command selects such an OS.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be any of, but not restricted to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GKE (&lt;a href=&#34;../provider/gke.md&#34;&gt;Notes&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AKS&lt;/li&gt;
&lt;li&gt;EKS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that how to deploy and tear-down such a cluster is outside of the
scope of this recipe.&lt;/p&gt;

&lt;h2 id=&#34;cf-operator&#34;&gt;cf-operator&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator&#34; target=&#34;_blank&#34;&gt;cf-operator&lt;/a&gt; is the underlying generic tool to deploy a (modified)
BOSH deployment like Kubecf for use.&lt;/p&gt;

&lt;p&gt;It has to be installed in the same Kubernetes cluster that Kubecf will
be deployed to.&lt;/p&gt;

&lt;p&gt;Here we are not using development-specific dependencies like bazel,
but only generic tools, i.e. &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;helm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;helm.md&#34; target=&#34;_blank&#34;&gt;Installing and configuring Helm&lt;/a&gt; is the same regardless of
the chosen foundation, and assuming that the cluster does not come
with Helm Tiller pre-installed.&lt;/p&gt;

&lt;h3 id=&#34;deployment-and-tear-down&#34;&gt;Deployment and Tear-down&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm install cf-operator &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;     --namespace cfo &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;     --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;global.singleNamespace.name=kubecf&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;     https://cf-operators.s3.amazonaws.com/helm-charts/cf-operator-5.0.0%2B0.gd7ac12bc.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above, version 5.0.0 of the operator was used. Look
into the &lt;code&gt;cf_operator&lt;/code&gt; &lt;a href=&#34;https://github.com/cloudfoundry-incubator/kubecf/blob/13ffb01dff8ab5eba16da54539b36e3b3b5f758e/dependencies.yaml#L108&#34; target=&#34;_blank&#34;&gt;section&lt;/a&gt; of the top-level &lt;code&gt;dependencies.yaml&lt;/code&gt; file to find
the version of the operator validated against the current kubecf
master.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
&amp;gt; The above &lt;code&gt;helm install&lt;/code&gt; will generate many controllers spread over multiple pods inside the &lt;code&gt;cfo&lt;/code&gt; namespace.
&amp;gt; Most of these controllers run inside the &lt;code&gt;cf-operator&lt;/code&gt; pod.
&amp;gt;
&amp;gt; The &lt;code&gt;global.singleNamespace.name=kubecf&lt;/code&gt; path tells the
controllers to watch for CRDÂ´s instances into the &lt;code&gt;kubecf&lt;/code&gt; namespace.
&amp;gt;
&amp;gt; The cf-operator helm chart will generate the &lt;code&gt;kubecf&lt;/code&gt; namespace during installation, and eventually one of the
controllers will use a webhook to label this namespace with the &lt;code&gt;cf-operator-ns&lt;/code&gt; key.
&amp;gt;
&amp;gt; If the &lt;code&gt;kubecf&lt;/code&gt; namespace is deleted, but the operators are still running, they will no longer
know which namespace to watch. This can lead to problems, so make sure you also delete the pods
inside the &lt;code&gt;cfo&lt;/code&gt; namespace, after deleting the &lt;code&gt;kubecf&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;Note how the namespace the operator is installed into (&lt;code&gt;cfo&lt;/code&gt;) differs
from the namespace the operator is watching for deployments (&lt;code&gt;kubecf&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This form of deployment enables restarting the operator because it is
not affected by webhooks. It further enables the deletion of the
Kubecf deployment namespace to start from scratch, without redeploying
the operator itself.&lt;/p&gt;

&lt;p&gt;Tear-down is done with a standard &lt;code&gt;helm delete ...&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;kubecf&#34;&gt;Kubecf&lt;/h2&gt;

&lt;p&gt;With all the prerequisites handled by the preceding sections it is now
possible to build and deploy kubecf itself.&lt;/p&gt;

&lt;p&gt;This again uses helm and a released helm chart.&lt;/p&gt;

&lt;h3 id=&#34;deployment-and-tear-down-1&#34;&gt;Deployment and Tear-down&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm install kubecf &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;     --namespace kubecf &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;     https://kubecf.s3.amazonaws.com/kubecf-v2.3.0.tgz &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;     --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;system_domain=kubecf.suse.dev&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this default deployment, kubecf is launched without Ingress, and it
uses the Diego scheduler.&lt;/p&gt;

&lt;p&gt;Tear-down is done with a standard &lt;code&gt;helm delete ...&lt;/code&gt; command.&lt;/p&gt;

&lt;h3 id=&#34;access&#34;&gt;Access&lt;/h3&gt;

&lt;p&gt;To access the cluster after the cf-operator has completed the
deployment and all pods are active invoke:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cf api --skip-ssl-validation &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://api.&amp;lt;domain&amp;gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Copy the admin cluster password.&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;admin_pass&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get secret &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;        --namespace kubecf var-cf-admin-password &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;        -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{.data.password}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; base64 --decode&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Use the password from the previous step when requested.&lt;/span&gt;
cf auth admin &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;admin_pass&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;advanced-topics&#34;&gt;Advanced Topics&lt;/h3&gt;

&lt;h4 id=&#34;diego-vs-eirini&#34;&gt;Diego vs Eirini&lt;/h4&gt;

&lt;p&gt;Diego is the standard scheduler used by kubecf to deploy CF
applications. Eirini is an alternative to Diego that follows a more
Kubernetes native approach, deploying the CF apps directly to a
Kubernetes namespace.&lt;/p&gt;

&lt;p&gt;To activate this alternative, use the option
&lt;code&gt;--set features.eirini.enabled=true&lt;/code&gt; when deploying kubecf from its chart.&lt;/p&gt;

&lt;h4 id=&#34;ingress&#34;&gt;Ingress&lt;/h4&gt;

&lt;p&gt;By default, the cluster is exposed through its Kubernetes services.&lt;/p&gt;

&lt;p&gt;To use the NGINX ingress instead, it is necessary to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install and configure the NGINX Ingress Controller.&lt;/li&gt;
&lt;li&gt;Configure Kubecf to use the ingress controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This has to happen before deploying kubecf.&lt;/p&gt;

&lt;h5 id=&#34;installation-of-the-nginx-ingress-controller&#34;&gt;Installation of the NGINX Ingress Controller&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm install stable/nginx-ingress &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --name ingress &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --namespace ingress &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tcp.2222=kubecf/scheduler:2222&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tcp.&amp;lt;services.tcp-router.port_range.start&amp;gt;=kubecf/tcp-router:&amp;lt;services.tcp-router.port_range.start&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  ...
  --set &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tcp.&amp;lt;services.tcp-router.port_range.end&amp;gt;=kubecf/tcp-router:&amp;lt;services.tcp-router.port_range.end&amp;gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;tcp.&amp;lt;port&amp;gt;&lt;/code&gt; option uses the NGINX TCP pass-through.&lt;/p&gt;

&lt;p&gt;In the case of the &lt;code&gt;tcp-router&lt;/code&gt; ports, one &lt;code&gt;--set&lt;/code&gt; for each port is required, starting with
&lt;code&gt;services.tcp-router.port_range.start&lt;/code&gt; and ending with &lt;code&gt;services.tcp-router.port_range.end&lt;/code&gt;. Those
values are defined on the &lt;code&gt;values.yaml&lt;/code&gt; file with default values.&lt;/p&gt;

&lt;h5 id=&#34;configure-kubecf&#34;&gt;Configure kubecf&lt;/h5&gt;

&lt;p&gt;Use the Helm option &lt;code&gt;--set features.ingress.enabled=true&lt;/code&gt; when
deploying kubecf.&lt;/p&gt;

&lt;h4 id=&#34;external-database&#34;&gt;External Database&lt;/h4&gt;

&lt;p&gt;By default, kubecf includes a single-availability database provided by the
cf-mysql-release. Kubecf also exposes a way to use an external database via the
Helm property &lt;code&gt;features.external_database&lt;/code&gt;. Check the &lt;a href=&#34;../../deploy/helm/kubecf/values.yaml&#34;&gt;values.yaml&lt;/a&gt; for more
details.&lt;/p&gt;

&lt;p&gt;For local development with an external database, the command
&lt;code&gt;bash  ./scripts/deploy_mysql.sh&lt;/code&gt; will bring a mysql database up and running
ready to be consumed by kubecf.&lt;/p&gt;

&lt;p&gt;An example for the additional values to be provided to &lt;code&gt;make kubecf:apply&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;features&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;external_database&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;enabled&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;type&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;mysql&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;host&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;kubecf-mysql.kubecf-mysql.svc&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;port&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3306&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;databases&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;uaa&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;uaa&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;root_password&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        username: root&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;cc&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;cloud_controller&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;root_password&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        username: root&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;bbs&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;diego&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;root_password&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        username: root&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;routing_api&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;routing-api&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;root_password&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        username: root&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;policy_server&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;network_policy&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;root_password&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        username: root&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;silk_controller&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;network_connectivity&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;root_password&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        username: root&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;locket&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;locket&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;root_password&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        username: root&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;credhub&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;credhub&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;root_password&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        username: root&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Kubernetes Affinities and Tolerations</title>
      <link>https://kubecf.suse.dev/docs/deployment/affinities-and-tolerations/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubecf.suse.dev/docs/deployment/affinities-and-tolerations/</guid>
      <description>
        
        
        

&lt;p&gt;This document describes how the administrator may influence how the various
workloads that are part of KubeCF will get deployed onto their Kuberntes
cluster.&lt;/p&gt;

&lt;h2 id=&#34;affinities&#34;&gt;Affinities&lt;/h2&gt;

&lt;p&gt;Kubernetes will attempt to schedule work based on their &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity&#34; target=&#34;_blank&#34;&gt;affinities and
anti-affinities&lt;/a&gt;; by default, KubeCF will request for each instance group to be
scheduled away from other replicas of the same instance group.  Additionally,
by default the &lt;code&gt;router&lt;/code&gt; instance group and the &lt;code&gt;diego-cell&lt;/code&gt; instance group will
have an anti-affinity towards each other.&lt;/p&gt;

&lt;p&gt;The affinities can be overridden on a per-instance-group basis, using helm
configuration values such as the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;sizing&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;uaa&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;affinity&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;podAntiAffinity&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;labelSelector&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;matchExpressions&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;key&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;quarks.cloudfoundry.org/quarks-statefulset-name&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;operator&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;In&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;values&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;uaa&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;api&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will request &lt;code&gt;uaa&lt;/code&gt; pods to avoid any other &lt;code&gt;uaa&lt;/code&gt; or &lt;code&gt;api&lt;/code&gt; pods; this may be
helpful if your UAA instances consume resources to the point where they slow
down API access.  Note that if any affinity or anti-affinity options are given,
they will override the default anti-affinities; it is recommended that they be
specified explicitly as well, as given in the example above.&lt;/p&gt;

&lt;p&gt;Note that it is also possible to declare &lt;code&gt;nodeAffinity&lt;/code&gt; and &lt;code&gt;podAffinity&lt;/code&gt;, as
the whole affinity block is assumed to be a valid Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#affinity-v1-core&#34; target=&#34;_blank&#34;&gt;affinity block&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tolerations&#34;&gt;Tolerations&lt;/h2&gt;

&lt;p&gt;Kubernetes has a concept of &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&#34; target=&#34;_blank&#34;&gt;taints and tolerations&lt;/a&gt;, which can be used to
prevent workloads from running on a given &lt;a href=&#34;https://kubernetes.io/docs/concepts/architecture/nodes/&#34; target=&#34;_blank&#34;&gt;node&lt;/a&gt;, and then whitelist some
workloads on it again; this can be used to do things such as ensuring the
physical host has the appropriate kinds of resources, or to evict work from
nodes that will be removed.&lt;/p&gt;

&lt;p&gt;Tolerations can be configured in KubeCF on an instance group level, by providing
the appropriate configuration in the helm values.  For example, to allocate a
Kubernetes node such that it will only run digeo-cell, we could do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# This marks the node &amp;#34;beefy-node&amp;#34; with a taint of &amp;#34;instance-group&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# with a value of &amp;#34;diego-cell&amp;#34;, and prevents scheduling workloads that&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# do not have a matching taint.&lt;/span&gt;
kubectl taint nodes beefy-node instance-group&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;diego-cell:NoSchedule&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could then allow diego-cell to be scheduled onto that node by deploying
KubeCF with a helm &lt;code&gt;values.yaml&lt;/code&gt; that contains the toleration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;sizing&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;diego-cell&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;tolerations&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;key&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;instance-group&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;operator&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Equal&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;value&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;diego-cell&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;effect&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;NoSchedule&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then any diego-cell containers will be allowed to run on the &lt;code&gt;beefy-node&lt;/code&gt; node.
This, of course, does not guarantee that those containers will actually run on
that node; it is also available to run on any other node.  In order to enforce
placement, we will also need to add a node label:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl label nodes beefy-node instance-group-label&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;diego-cell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is then possible to add a node affinity term to the instane group, so that
it will always be scheduled on nodes with the given label:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;sizing&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;diego-cell&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# tolerations: as above&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;affinity&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;nodeAffinity&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;nodeSelectorTerms&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;matchExpressions&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;key&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;instance-group-label&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;operator&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;In&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;values&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;diego-cell&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# podAntiAffinity term, as above; the defaults will be lost.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
